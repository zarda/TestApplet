//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  // External procedures 
  // Chapter: Graphics / Text
  // Short Description: This procedure writes a text message. 
  public void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
      HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
  {



      // Local iconic variables 

      // Local control variables 

      HTuple hv_Red = null, hv_Green = null, hv_Blue = null;
      HTuple hv_Row1Part = null, hv_Column1Part = null, hv_Row2Part = null;
      HTuple hv_Column2Part = null, hv_RowWin = null, hv_ColumnWin = null;
      HTuple hv_WidthWin = new HTuple(), hv_HeightWin = null;
      HTuple hv_MaxAscent = null, hv_MaxDescent = null, hv_MaxWidth = null;
      HTuple hv_MaxHeight = null, hv_R1 = new HTuple(), hv_C1 = new HTuple();
      HTuple hv_FactorRow = new HTuple(), hv_FactorColumn = new HTuple();
      HTuple hv_UseShadow = null, hv_ShadowColor = null, hv_Exception = new HTuple();
      HTuple hv_Width = new HTuple(), hv_Index = new HTuple();
      HTuple hv_Ascent = new HTuple(), hv_Descent = new HTuple();
      HTuple hv_W = new HTuple(), hv_H = new HTuple(), hv_FrameHeight = new HTuple();
      HTuple hv_FrameWidth = new HTuple(), hv_R2 = new HTuple();
      HTuple hv_C2 = new HTuple(), hv_DrawMode = new HTuple();
      HTuple hv_CurrentColor = new HTuple();
      HTuple   hv_Box_COPY_INP_TMP = hv_Box.Clone();
      HTuple   hv_Color_COPY_INP_TMP = hv_Color.Clone();
      HTuple   hv_Column_COPY_INP_TMP = hv_Column.Clone();
      HTuple   hv_Row_COPY_INP_TMP = hv_Row.Clone();
      HTuple   hv_String_COPY_INP_TMP = hv_String.Clone();

      // Initialize local and output iconic variables 
    //This procedure displays text in a graphics window.
    //
    //Input parameters:
    //WindowHandle: The WindowHandle of the graphics window, where
    //   the message should be displayed
    //String: A tuple of strings containing the text message to be displayed
    //CoordSystem: If set to 'window', the text position is given
    //   with respect to the window coordinate system.
    //   If set to 'image', image coordinates are used.
    //   (This may be useful in zoomed images.)
    //Row: The row coordinate of the desired text position
    //   If set to -1, a default value of 12 is used.
    //Column: The column coordinate of the desired text position
    //   If set to -1, a default value of 12 is used.
    //Color: defines the color of the text as string.
    //   If set to [], '' or 'auto' the currently set color is used.
    //   If a tuple of strings is passed, the colors are used cyclically
    //   for each new textline.
    //Box: If Box[0] is set to 'true', the text is written within an orange box.
    //     If set to' false', no box is displayed.
    //     If set to a color string (e.g. 'white', '#FF00CC', etc.),
    //       the text is written in a box of that color.
    //     An optional second value for Box (Box[1]) controls if a shadow is displayed:
    //       'true' -> display a shadow in a default color
    //       'false' -> display no shadow (same as if no second value is given)
    //       otherwise -> use given string as color string for the shadow color
    //
    //Prepare window
    HOperatorSet.GetRgb(hv_ExpDefaultWinHandle, out hv_Red, out hv_Green, out hv_Blue);
    HOperatorSet.GetPart(hv_ExpDefaultWinHandle, out hv_Row1Part, out hv_Column1Part, 
        out hv_Row2Part, out hv_Column2Part);
    HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_RowWin, out hv_ColumnWin, 
        out hv_WidthWin, out hv_HeightWin);
    HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_HeightWin-1, hv_WidthWin-1);
    //
    //default settings
    if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
    {
      hv_Row_COPY_INP_TMP = 12;
    }
    if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
    {
      hv_Column_COPY_INP_TMP = 12;
    }
    if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
    {
      hv_Color_COPY_INP_TMP = "";
    }
    //
    hv_String_COPY_INP_TMP = (((""+hv_String_COPY_INP_TMP)+"")).TupleSplit("\n");
    //
    //Estimate extentions of text depending on font size.
    HOperatorSet.GetFontExtents(hv_ExpDefaultWinHandle, out hv_MaxAscent, out hv_MaxDescent, 
        out hv_MaxWidth, out hv_MaxHeight);
    if ((int)(new HTuple(hv_CoordSystem.TupleEqual("window"))) != 0)
    {
      hv_R1 = hv_Row_COPY_INP_TMP.Clone();
      hv_C1 = hv_Column_COPY_INP_TMP.Clone();
    }
    else
    {
      //Transform image to window coordinates
      hv_FactorRow = (1.0*hv_HeightWin)/((hv_Row2Part-hv_Row1Part)+1);
      hv_FactorColumn = (1.0*hv_WidthWin)/((hv_Column2Part-hv_Column1Part)+1);
      hv_R1 = ((hv_Row_COPY_INP_TMP-hv_Row1Part)+0.5)*hv_FactorRow;
      hv_C1 = ((hv_Column_COPY_INP_TMP-hv_Column1Part)+0.5)*hv_FactorColumn;
    }
    //
    //Display text box depending on text size
    hv_UseShadow = 1;
    hv_ShadowColor = "gray";
    if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(0))).TupleEqual("true"))) != 0)
    {
      if (hv_Box_COPY_INP_TMP == null)
        hv_Box_COPY_INP_TMP = new HTuple();
      hv_Box_COPY_INP_TMP[0] = "#fce9d4";
      hv_ShadowColor = "#f28d26";
    }
    if ((int)(new HTuple((new HTuple(hv_Box_COPY_INP_TMP.TupleLength())).TupleGreater(
        1))) != 0)
    {
      if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(1))).TupleEqual("true"))) != 0)
      {
        //Use default ShadowColor set above
      }
      else if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(1))).TupleEqual(
          "false"))) != 0)
      {
        hv_UseShadow = 0;
      }
      else
      {
        hv_ShadowColor = hv_Box_COPY_INP_TMP[1];
        //Valid color?
        try
        {
          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Box_COPY_INP_TMP.TupleSelect(
              1));
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
          hv_Exception = "Wrong value of control parameter Box[1] (must be a 'true', 'false', or a valid color string)";
          throw new HalconException(hv_Exception);
        }
      }
    }
    if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(0))).TupleNotEqual("false"))) != 0)
    {
      //Valid color?
      try
      {
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Box_COPY_INP_TMP.TupleSelect(
            0));
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Exception = "Wrong value of control parameter Box[0] (must be a 'true', 'false', or a valid color string)";
        throw new HalconException(hv_Exception);
      }
      //Calculate box extents
      hv_String_COPY_INP_TMP = (" "+hv_String_COPY_INP_TMP)+" ";
      hv_Width = new HTuple();
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_String_COPY_INP_TMP.TupleSelect(
            hv_Index), out hv_Ascent, out hv_Descent, out hv_W, out hv_H);
        hv_Width = hv_Width.TupleConcat(hv_W);
      }
      hv_FrameHeight = hv_MaxHeight*(new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ));
      hv_FrameWidth = (((new HTuple(0)).TupleConcat(hv_Width))).TupleMax();
      hv_R2 = hv_R1+hv_FrameHeight;
      hv_C2 = hv_C1+hv_FrameWidth;
      //Display rectangles
      HOperatorSet.GetDraw(hv_ExpDefaultWinHandle, out hv_DrawMode);
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
      //Set shadow color
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_ShadowColor);
      if ((int)(hv_UseShadow) != 0)
      {
        HOperatorSet.DispRectangle1(hv_ExpDefaultWinHandle, hv_R1+1, hv_C1+1, hv_R2+1, 
            hv_C2+1);
      }
      //Set box color
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Box_COPY_INP_TMP.TupleSelect(
          0));
      HOperatorSet.DispRectangle1(hv_ExpDefaultWinHandle, hv_R1, hv_C1, hv_R2, hv_C2);
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, hv_DrawMode);
    }
    //Write text.
    for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
        ))-1); hv_Index = (int)hv_Index + 1)
    {
      hv_CurrentColor = hv_Color_COPY_INP_TMP.TupleSelect(hv_Index%(new HTuple(hv_Color_COPY_INP_TMP.TupleLength()
          )));
      if ((int)((new HTuple(hv_CurrentColor.TupleNotEqual(""))).TupleAnd(new HTuple(hv_CurrentColor.TupleNotEqual(
          "auto")))) != 0)
      {
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_CurrentColor);
      }
      else
      {
        HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
      }
      hv_Row_COPY_INP_TMP = hv_R1+(hv_MaxHeight*hv_Index);
      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_Row_COPY_INP_TMP, hv_C1);
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_String_COPY_INP_TMP.TupleSelect(
          hv_Index));
    }
    //Reset changed window settings
    HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
    HOperatorSet.SetPart(hv_ExpDefaultWinHandle, hv_Row1Part, hv_Column1Part, hv_Row2Part, 
        hv_Column2Part);

    return;
  }

  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS 
  public void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {



        // Local iconic variables 

        // Local control variables 

        HTuple hv_OS = null, hv_BufferWindowHandle = new HTuple();
        HTuple hv_Ascent = new HTuple(), hv_Descent = new HTuple();
        HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
        HTuple hv_Scale = new HTuple(), hv_Exception = new HTuple();
        HTuple hv_SubFamily = new HTuple(), hv_Fonts = new HTuple();
        HTuple hv_SystemFonts = new HTuple(), hv_Guess = new HTuple();
        HTuple hv_I = new HTuple(), hv_Index = new HTuple(), hv_AllowedFontSizes = new HTuple();
        HTuple hv_Distances = new HTuple(), hv_Indices = new HTuple();
        HTuple hv_FontSelRegexp = new HTuple(), hv_FontsCourier = new HTuple();
        HTuple   hv_Bold_COPY_INP_TMP = hv_Bold.Clone();
        HTuple   hv_Font_COPY_INP_TMP = hv_Font.Clone();
        HTuple   hv_Size_COPY_INP_TMP = hv_Size.Clone();
        HTuple   hv_Slant_COPY_INP_TMP = hv_Slant.Clone();

        // Initialize local and output iconic variables 
    //This procedure sets the text font of the current window with
    //the specified attributes.
    //It is assumed that following fonts are installed on the system:
    //Windows: Courier New, Arial Times New Roman
    //Mac OS X: CourierNewPS, Arial, TimesNewRomanPS
    //Linux: courier, helvetica, times
    //Because fonts are displayed smaller on Linux than on Windows,
    //a scaling factor of 1.25 is used the get comparable results.
    //For Linux, only a limited number of font sizes is supported,
    //to get comparable results, it is recommended to use one of the
    //following sizes: 9, 11, 14, 16, 20, 27
    //(which will be mapped internally on Linux systems to 11, 14, 17, 20, 25, 34)
    //
    //Input parameters:
    //WindowHandle: The graphics window for which the font will be set
    //Size: The font size. If Size=-1, the default of 16 is used.
    //Bold: If set to 'true', a bold font is used
    //Slant: If set to 'true', a slanted font is used
    //
    HOperatorSet.GetSystem("operating_system", out hv_OS);
    // dev_get_preferences(...); only in hdevelop
    // dev_set_preferences(...); only in hdevelop
    if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
        new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
    {
      hv_Size_COPY_INP_TMP = 16;
    }
    if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Win"))) != 0)
    {
      //Set font on Windows systems
      try
      {
        //Check, if font scaling is switched on
        //open_window(...);
        HOperatorSet.SetFont(hv_ExpDefaultWinHandle, "-Consolas-16-*-0-*-*-1-");
        HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, "test_string", out hv_Ascent, 
            out hv_Descent, out hv_Width, out hv_Height);
        //Expected width is 110
        hv_Scale = 110.0/hv_Width;
        hv_Size_COPY_INP_TMP = ((hv_Size_COPY_INP_TMP*hv_Scale)).TupleInt();
        //close_window(...);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        //throw (Exception)
      }
      if ((int)((new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))).TupleOr(
          new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("courier")))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Courier New";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Consolas";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Arial";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Times New Roman";
      }
      if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = 1;
      }
      else if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = 0;
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_Slant_COPY_INP_TMP = 1;
      }
      else if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Slant_COPY_INP_TMP = 0;
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      try
      {
        HOperatorSet.SetFont(hv_ExpDefaultWinHandle, ((((((("-"+hv_Font_COPY_INP_TMP)+"-")+hv_Size_COPY_INP_TMP)+"-*-")+hv_Slant_COPY_INP_TMP)+"-*-*-")+hv_Bold_COPY_INP_TMP)+"-");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        //throw (Exception)
      }
    }
    else if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Dar"))) != 0)
    {
      //Set font on Mac OS X systems. Since OS X does not have a strict naming
      //scheme for font attributes, we use tables to determine the correct font
      //name.
      hv_SubFamily = 0;
      if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_SubFamily = hv_SubFamily.TupleBor(1);
      }
      else if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleNotEqual("false"))) != 0)
      {
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_SubFamily = hv_SubFamily.TupleBor(2);
      }
      else if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleNotEqual("false"))) != 0)
      {
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
      {
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Menlo-Regular";
        hv_Fonts[1] = "Menlo-Italic";
        hv_Fonts[2] = "Menlo-Bold";
        hv_Fonts[3] = "Menlo-BoldItalic";
      }
      else if ((int)((new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))).TupleOr(
          new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("courier")))) != 0)
      {
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "CourierNewPSMT";
        hv_Fonts[1] = "CourierNewPS-ItalicMT";
        hv_Fonts[2] = "CourierNewPS-BoldMT";
        hv_Fonts[3] = "CourierNewPS-BoldItalicMT";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "ArialMT";
        hv_Fonts[1] = "Arial-ItalicMT";
        hv_Fonts[2] = "Arial-BoldMT";
        hv_Fonts[3] = "Arial-BoldItalicMT";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "TimesNewRomanPSMT";
        hv_Fonts[1] = "TimesNewRomanPS-ItalicMT";
        hv_Fonts[2] = "TimesNewRomanPS-BoldMT";
        hv_Fonts[3] = "TimesNewRomanPS-BoldItalicMT";
      }
      else
      {
        //Attempt to figure out which of the fonts installed on the system
        //the user could have meant.
        HOperatorSet.QueryFont(hv_ExpDefaultWinHandle, out hv_SystemFonts);
        hv_Fonts = new HTuple();
        hv_Fonts = hv_Fonts.TupleConcat(hv_Font_COPY_INP_TMP);
        hv_Fonts = hv_Fonts.TupleConcat(hv_Font_COPY_INP_TMP);
        hv_Fonts = hv_Fonts.TupleConcat(hv_Font_COPY_INP_TMP);
        hv_Fonts = hv_Fonts.TupleConcat(hv_Font_COPY_INP_TMP);
        hv_Guess = new HTuple();
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP);
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-Regular");
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"MT");
        for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Guess.TupleLength()))-1); hv_I = (int)hv_I + 1)
        {
          HOperatorSet.TupleFind(hv_SystemFonts, hv_Guess.TupleSelect(hv_I), out hv_Index);
          if ((int)(new HTuple(hv_Index.TupleNotEqual(-1))) != 0)
          {
            if (hv_Fonts == null)
              hv_Fonts = new HTuple();
            hv_Fonts[0] = hv_Guess.TupleSelect(hv_I);
            break;
          }
        }
        //Guess name of slanted font
        hv_Guess = new HTuple();
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-Italic");
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-ItalicMT");
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-Oblique");
        for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Guess.TupleLength()))-1); hv_I = (int)hv_I + 1)
        {
          HOperatorSet.TupleFind(hv_SystemFonts, hv_Guess.TupleSelect(hv_I), out hv_Index);
          if ((int)(new HTuple(hv_Index.TupleNotEqual(-1))) != 0)
          {
            if (hv_Fonts == null)
              hv_Fonts = new HTuple();
            hv_Fonts[1] = hv_Guess.TupleSelect(hv_I);
            break;
          }
        }
        //Guess name of bold font
        hv_Guess = new HTuple();
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-Bold");
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-BoldMT");
        for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Guess.TupleLength()))-1); hv_I = (int)hv_I + 1)
        {
          HOperatorSet.TupleFind(hv_SystemFonts, hv_Guess.TupleSelect(hv_I), out hv_Index);
          if ((int)(new HTuple(hv_Index.TupleNotEqual(-1))) != 0)
          {
            if (hv_Fonts == null)
              hv_Fonts = new HTuple();
            hv_Fonts[2] = hv_Guess.TupleSelect(hv_I);
            break;
          }
        }
        //Guess name of bold slanted font
        hv_Guess = new HTuple();
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-BoldItalic");
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-BoldItalicMT");
        hv_Guess = hv_Guess.TupleConcat(hv_Font_COPY_INP_TMP+"-BoldOblique");
        for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Guess.TupleLength()))-1); hv_I = (int)hv_I + 1)
        {
          HOperatorSet.TupleFind(hv_SystemFonts, hv_Guess.TupleSelect(hv_I), out hv_Index);
          if ((int)(new HTuple(hv_Index.TupleNotEqual(-1))) != 0)
          {
            if (hv_Fonts == null)
              hv_Fonts = new HTuple();
            hv_Fonts[3] = hv_Guess.TupleSelect(hv_I);
            break;
          }
        }
      }
      hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(hv_SubFamily);
      try
      {
        HOperatorSet.SetFont(hv_ExpDefaultWinHandle, (hv_Font_COPY_INP_TMP+"-")+hv_Size_COPY_INP_TMP);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        //throw (Exception)
      }
    }
    else
    {
      //Set font for UNIX systems
      hv_Size_COPY_INP_TMP = hv_Size_COPY_INP_TMP*1.25;
      hv_AllowedFontSizes = new HTuple();
      hv_AllowedFontSizes[0] = 11;
      hv_AllowedFontSizes[1] = 14;
      hv_AllowedFontSizes[2] = 17;
      hv_AllowedFontSizes[3] = 20;
      hv_AllowedFontSizes[4] = 25;
      hv_AllowedFontSizes[5] = 34;
      if ((int)(new HTuple(((hv_AllowedFontSizes.TupleFind(hv_Size_COPY_INP_TMP))).TupleEqual(
          -1))) != 0)
      {
        hv_Distances = ((hv_AllowedFontSizes-hv_Size_COPY_INP_TMP)).TupleAbs();
        HOperatorSet.TupleSortIndex(hv_Distances, out hv_Indices);
        hv_Size_COPY_INP_TMP = hv_AllowedFontSizes.TupleSelect(hv_Indices.TupleSelect(
            0));
      }
      if ((int)((new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))).TupleOr(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(
          "Courier")))) != 0)
      {
        hv_Font_COPY_INP_TMP = "courier";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "helvetica";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "times";
      }
      if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = "bold";
      }
      else if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = "medium";
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("times"))) != 0)
        {
          hv_Slant_COPY_INP_TMP = "i";
        }
        else
        {
          hv_Slant_COPY_INP_TMP = "o";
        }
      }
      else if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Slant_COPY_INP_TMP = "r";
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      try
      {
        HOperatorSet.SetFont(hv_ExpDefaultWinHandle, ((((((("-adobe-"+hv_Font_COPY_INP_TMP)+"-")+hv_Bold_COPY_INP_TMP)+"-")+hv_Slant_COPY_INP_TMP)+"-normal-*-")+hv_Size_COPY_INP_TMP)+"-*-*-*-*-*-*-*");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        if ((int)((new HTuple(((hv_OS.TupleSubstr(0,4))).TupleEqual("Linux"))).TupleAnd(
            new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("courier")))) != 0)
        {
          HOperatorSet.QueryFont(hv_ExpDefaultWinHandle, out hv_Fonts);
          hv_FontSelRegexp = (("^-[^-]*-[^-]*[Cc]ourier[^-]*-"+hv_Bold_COPY_INP_TMP)+"-")+hv_Slant_COPY_INP_TMP;
          hv_FontsCourier = ((hv_Fonts.TupleRegexpSelect(hv_FontSelRegexp))).TupleRegexpMatch(
              hv_FontSelRegexp);
          if ((int)(new HTuple((new HTuple(hv_FontsCourier.TupleLength())).TupleEqual(
              0))) != 0)
          {
            hv_Exception = "Wrong font name";
            //throw (Exception)
          }
          else
          {
            try
            {
              HOperatorSet.SetFont(hv_ExpDefaultWinHandle, (((hv_FontsCourier.TupleSelect(
                  0))+"-normal-*-")+hv_Size_COPY_INP_TMP)+"-*-*-*-*-*-*-*");
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
              //throw (Exception)
            }
          }
        }
        //throw (Exception)
      }
    }
    // dev_set_preferences(...); only in hdevelop

    return;
  }

  // Chapter: Graphics / Text
  // Short Description: This procedure displays 'Click 'Run' to continue' in the lower right corner of the screen. 
  public void disp_continue_message (HTuple hv_WindowHandle, HTuple hv_Color, HTuple hv_Box)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ContinueMessage = null, hv_Row = null;
    HTuple hv_Column = null, hv_Width = null, hv_Height = null;
    HTuple hv_Ascent = null, hv_Descent = null, hv_TextWidth = null;
    HTuple hv_TextHeight = null;
    // Initialize local and output iconic variables 
    //This procedure displays 'Press Run (F5) to continue' in the
    //lower right corner of the screen.
    //It uses the procedure disp_message.
    //
    //Input parameters:
    //WindowHandle: The window, where the text shall be displayed
    //Color: defines the text color.
    //   If set to '' or 'auto', the currently set color is used.
    //Box: If set to 'true', the text is displayed in a box.
    //
    hv_ContinueMessage = "Press Run (F5) to continue";
    HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
        out hv_Width, out hv_Height);
    HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, (" "+hv_ContinueMessage)+" ", 
        out hv_Ascent, out hv_Descent, out hv_TextWidth, out hv_TextHeight);
    disp_message(hv_ExpDefaultWinHandle, hv_ContinueMessage, "window", (hv_Height-hv_TextHeight)-12, 
        (hv_Width-hv_TextWidth)-12, hv_Color, hv_Box);

    return;
  }

  // Chapter: Develop
  // Short Description: Open a new graphics window that preserves the aspect ratio of the given image size. 
  public void dev_open_window_fit_size (HTuple hv_Row, HTuple hv_Column, HTuple hv_Width, 
      HTuple hv_Height, HTuple hv_WidthLimit, HTuple hv_HeightLimit, out HTuple hv_WindowHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = null, hv_TempWidth = null, hv_TempHeight = null;
    HTuple hv_WindowWidth = new HTuple(), hv_WindowHeight = null;
    // Initialize local and output iconic variables 
    hv_WindowHandle = new HTuple();
    //This procedure open a new graphic window
    //such that it fits into the limits specified by WidthLimit
    //and HeightLimit, but also maintains the correct aspect ratio
    //given by Width and Height.
    //
    //If it is impossible to match the minimum and maximum extent requirements
    //at the same time (f.e. if the image is very long but narrow),
    //the maximum value gets a higher priority.
    //
    //Parse input tuple WidthLimit
    if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
    {
      hv_MinWidth = 500;
      hv_MaxWidth = 800;
    }
    else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinWidth = 0;
      hv_MaxWidth = hv_WidthLimit.Clone();
    }
    else
    {
      hv_MinWidth = hv_WidthLimit[0];
      hv_MaxWidth = hv_WidthLimit[1];
    }
    //Parse input tuple HeightLimit
    if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
    {
      hv_MinHeight = 400;
      hv_MaxHeight = 600;
    }
    else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinHeight = 0;
      hv_MaxHeight = hv_HeightLimit.Clone();
    }
    else
    {
      hv_MinHeight = hv_HeightLimit[0];
      hv_MaxHeight = hv_HeightLimit[1];
    }
    //
    //Test, if window size has to be changed.
    hv_ResizeFactor = 1;
    //First, expand window to the minimum extents (if necessary).
    if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_Width))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
        hv_Height)))) != 0)
    {
      hv_ResizeFactor = (((((hv_MinWidth.TupleReal())/hv_Width)).TupleConcat((hv_MinHeight.TupleReal()
          )/hv_Height))).TupleMax();
    }
    hv_TempWidth = hv_Width*hv_ResizeFactor;
    hv_TempHeight = hv_Height*hv_ResizeFactor;
    //Then, shrink window to maximum extents (if necessary).
    if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
        hv_TempHeight)))) != 0)
    {
      hv_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal())/hv_TempWidth)).TupleConcat(
          (hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin());
    }
    hv_WindowWidth = hv_Width*hv_ResizeFactor;
    hv_WindowHeight = hv_Height*hv_ResizeFactor;
    //Resize window
    //dev_open_window(...);
    HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);

    return;
  }

  // Chapter: Develop
  // Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
  public void dev_update_off ()
  {

    // Initialize local and output iconic variables 
    //This procedure sets different update settings to 'off'.
    //This is useful to get the best performance and reduce overhead.
    //
    // dev_update_pc(...); only in hdevelop
    // dev_update_var(...); only in hdevelop
    // dev_update_window(...); only in hdevelop

    return;
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image=null, ho_ImageAffinTrans=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_DeviceIdentifier = null;
    HTuple hv_Index = null, hv_DeviceName = new HTuple(), hv_DeviceVendor = new HTuple();
    HTuple hv_Message = new HTuple(), hv_DeviceIndex = null;
    HTuple hv_DeviceHandle = new HTuple(), hv_HomMat2DIdentity = new HTuple();
    HTuple hv_HomMat2DScale = new HTuple(), hv_HomMat2D = new HTuple();
    HTuple hv_Loops = new HTuple(), hv_Before = new HTuple();
    HTuple hv_After = new HTuple(), hv_TimeGPU = new HTuple();
    HTuple hv_Grayval = new HTuple(), hv_Pointer = new HTuple();
    HTuple hv_Type = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_TimeGPUinclTransfer = new HTuple();
    HTuple hv_TimeCPU = new HTuple(), hv_SpeedUp = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageAffinTrans);
    try
    {
      //This example shows how to use compute devices with HALCON.
      //
      dev_update_off();
      //dev_close_window(...);
      dev_open_window_fit_size(0, 0, 640, 480, -1, -1, out hv_WindowHandle);
      set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
      //
      //Get list of all available compute devices.
      HOperatorSet.QueryAvailableComputeDevices(out hv_DeviceIdentifier);
      //
      //End example if no device could be found.
      if ((int)(new HTuple((new HTuple(hv_DeviceIdentifier.TupleLength())).TupleEqual(
          0))) != 0)
      {
        ho_Image.Dispose();
        ho_ImageAffinTrans.Dispose();

        return;
      }
      //
      //Display basic information on detected devices.
      disp_message(hv_ExpDefaultWinHandle, new HTuple(new HTuple("Found ")+(new HTuple(hv_DeviceIdentifier.TupleLength()
          )))+" Compute Device(s):", "window", 12, 12, "black", "true");
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DeviceIdentifier.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        HOperatorSet.GetComputeDeviceInfo(hv_DeviceIdentifier.TupleSelect(hv_Index), 
            "name", out hv_DeviceName);
        HOperatorSet.GetComputeDeviceInfo(hv_DeviceIdentifier.TupleSelect(hv_Index), 
            "vendor", out hv_DeviceVendor);
        if (hv_Message == null)
          hv_Message = new HTuple();
        hv_Message[hv_Index] = (((("Device #"+hv_Index)+": ")+hv_DeviceVendor)+" ")+hv_DeviceName;
      }
      disp_message(hv_ExpDefaultWinHandle, hv_Message, "window", 42, 12, "white", 
          "false");
      disp_continue_message(hv_ExpDefaultWinHandle, "black", "true");
      HDevelopStop();
      //
      //Perform a small benchmark for all devices.
      for (hv_DeviceIndex=0; (int)hv_DeviceIndex<=(int)((new HTuple(hv_DeviceIdentifier.TupleLength()
          ))-1); hv_DeviceIndex = (int)hv_DeviceIndex + 1)
      {
        HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
        disp_message(hv_ExpDefaultWinHandle, ("Activating Device #"+hv_DeviceIndex)+" and performing benchmark...", 
            "window", 12, 12, "black", "true");
        //Open device.
        HOperatorSet.OpenComputeDevice(hv_DeviceIdentifier.TupleSelect(hv_DeviceIndex), 
            out hv_DeviceHandle);
        //Deactivate asynchronous execution to obtain reliable benchmarks.
        HOperatorSet.SetComputeDeviceParam(hv_DeviceHandle, "asynchronous_execution", 
            "false");
        //Call affine_trans_image on this device and measure the obtained speed-up.
        //Activate the compute device and perform the initialization of affine_trans_image.
        //If this is omitted, the initialization is performed with the first
        //call of affine_trans_image.
        HOperatorSet.InitComputeDevice(hv_DeviceHandle, "affine_trans_image");
        HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
        //create benchmark input data
        ho_Image.Dispose();
        HOperatorSet.ReadImage(out ho_Image, "rings_and_nuts");
        HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
        HOperatorSet.HomMat2dScale(hv_HomMat2DIdentity, 0.9, 0.9, 320, 240, out hv_HomMat2DScale);
        HOperatorSet.HomMat2dRotate(hv_HomMat2DScale, 0.78, 320, 240, out hv_HomMat2D);
        //Set number of benchmark loops.
        hv_Loops = 200;
        //One call to fill caches.
        ho_ImageAffinTrans.Dispose();
        HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2D, 
            "constant", "false");
        HOperatorSet.CountSeconds(out hv_Before);
        HTuple end_val50 = hv_Loops;
        HTuple step_val50 = 1;
        for (hv_Index=1; hv_Index.Continue(end_val50, step_val50); hv_Index = hv_Index.TupleAdd(step_val50))
        {
          ho_ImageAffinTrans.Dispose();
          HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2D, 
              "constant", "false");
        }
        HOperatorSet.CountSeconds(out hv_After);
        hv_TimeGPU = ((hv_After-hv_Before)*1000.0)/hv_Loops;
        //
        //Perform a slightly modified version of this benchmark to include
        //host->device and device->host transfer.
        HOperatorSet.GetGrayval(ho_Image, 0, 0, out hv_Grayval);
        ho_ImageAffinTrans.Dispose();
        HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2D, 
            "constant", "false");
        HOperatorSet.CountSeconds(out hv_Before);
        HTuple end_val61 = hv_Loops;
        HTuple step_val61 = 1;
        for (hv_Index=1; hv_Index.Continue(end_val61, step_val61); hv_Index = hv_Index.TupleAdd(step_val61))
        {
          //set_grayval ensures that Image must be transferred to the device again.
          HOperatorSet.SetGrayval(ho_Image, 0, 0, hv_Grayval);
          ho_ImageAffinTrans.Dispose();
          HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2D, 
              "constant", "false");
          //get_image_pointer1 ensures that ImageAffinTrans is transferred back to host.
          HOperatorSet.GetImagePointer1(ho_ImageAffinTrans, out hv_Pointer, out hv_Type, 
              out hv_Width, out hv_Height);
        }
        HOperatorSet.CountSeconds(out hv_After);
        hv_TimeGPUinclTransfer = ((hv_After-hv_Before)*1000.0)/hv_Loops;
        //
        //Deactivate the device and perform the same benchmark on the CPU.
        HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
        ho_ImageAffinTrans.Dispose();
        HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2D, 
            "constant", "false");
        HOperatorSet.CountSeconds(out hv_Before);
        HTuple end_val75 = hv_Loops;
        HTuple step_val75 = 1;
        for (hv_Index=1; hv_Index.Continue(end_val75, step_val75); hv_Index = hv_Index.TupleAdd(step_val75))
        {
          ho_ImageAffinTrans.Dispose();
          HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2D, 
              "constant", "false");
        }
        HOperatorSet.CountSeconds(out hv_After);
        hv_TimeCPU = ((hv_After-hv_Before)*1000.0)/hv_Loops;
        hv_SpeedUp = hv_TimeCPU/hv_TimeGPU;
        hv_Message = "affine_trans_image runtimes:";
        if (hv_Message == null)
          hv_Message = new HTuple();
        hv_Message[1] = ((("Compute Device #"+hv_DeviceIndex)+" (excl. transfer): ")+(hv_TimeGPU.TupleString(
            ".2f")))+" ms";
        if (hv_Message == null)
          hv_Message = new HTuple();
        hv_Message[2] = ((("Compute Device #"+hv_DeviceIndex)+" (incl. transfer): ")+(hv_TimeGPUinclTransfer.TupleString(
            ".2f")))+" ms";
        if (hv_Message == null)
          hv_Message = new HTuple();
        hv_Message[3] = ("CPU:                                "+(hv_TimeCPU.TupleString(
            ".2f")))+" ms";
        if (hv_Message == null)
          hv_Message = new HTuple();
        hv_Message[4] = " ";
        if (hv_Message == null)
          hv_Message = new HTuple();
        hv_Message[5] = "Potential speedup: "+(hv_SpeedUp.TupleString(".1f"));
        disp_message(hv_ExpDefaultWinHandle, hv_Message, "window", 42, 12, "white", 
            "false");
        if ((int)(new HTuple(hv_DeviceIndex.TupleLess((new HTuple(hv_DeviceIdentifier.TupleLength()
            ))-1))) != 0)
        {
          disp_continue_message(hv_ExpDefaultWinHandle, "black", "true");
          HDevelopStop();
        }
      }
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_ImageAffinTrans.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();
    ho_ImageAffinTrans.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

